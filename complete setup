---
- name: Create AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    aws_region: us-east-1
    vpc_cidr: "10.0.0.0/16"
    subnet_cidr: "10.0.1.0/24"
    instance_type: t2.micro
    ami_id: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (update as needed)
    key_name: task  # Existing SSH key named 'task' in AWS
    s3_bucket_name: my-unique-bucket-{{ 999999999999 | random }}
    rds_db_name: mydatabase
    rds_instance_identifier: my-rds-instance
    rds_username: admin
    rds_password: SecurePass123!
    role_name: EC2S3RDSRole

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: my-vpc
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ aws_region }}"
        state: present
      register: vpc

    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ aws_region }}"
        az: "{{ aws_region }}a"
        state: present
      register: subnet

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
      register: igw

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        state: present
      register: route_table

    - name: Create Security Group
      amazon.aws.ec2_security_group:
        name: ec2-security-group
        description: Security group for EC2 instance
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        state: present
      register: security_group

    - name: Create IAM Role for EC2
      community.aws.iam_role:
        name: "{{ role_name }}"
        assume_role_policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        state: present
      register: iam_role

    - name: Attach S3 Policy to IAM Role
      community.aws.iam_role_policy:
        role_name: "{{ role_name }}"
        policy_name: S3Access
        policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:ListBucket"
                ],
                "Resource": [
                  "arn:aws:s3:::{{ s3_bucket_name }}",
                  "arn:aws:s3:::{{ s3_bucket_name }}/*"
                ]
              }
            ]
          }
        state: present

    - name: Attach RDS Policy to IAM Role
      community.aws.iam_role_policy:
        role_name: "{{ role_name }}"
        policy_name: RDSAccess
        policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "rds:DescribeDBInstances",
                  "rds:ModifyDBInstance",
                  "rds:CreateDBSnapshot",
                  "rds:RestoreDBInstanceFromDBSnapshot"
                ],
                "Resource": "*"
              }
            ]
          }
        state: present

    - name: Create IAM Instance Profile
      community.aws.iam_instance_profile:
        name: "{{ role_name }}-profile"
        roles:
          - "{{ role_name }}"
        state: present
      register: instance_profile

    - name: Create S3 Bucket
      amazon.aws.s3_bucket:
        name: "{{ s3_bucket_name }}"
        region: "{{ aws_region }}"
        state: present
      register: s3_bucket

    - name: Create RDS Subnet Group
      community.aws.rds_subnet_group:
        name: my-rds-subnet-group
        description: RDS subnet group
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        state: present

    - name: Create RDS Instance
      community.aws.rds_instance:
        engine: mysql
        identifier: "{{ rds_instance_identifier }}"
        instance_type: db.t2.micro
        username: "{{ rds_username }}"
        password: "{{ rds_password }}"
        db_name: "{{ rds_db_name }}"
        allocated_storage: 20
        region: "{{ aws_region }}"
        vpc_security_group_ids:
          - "{{ security_group.group_id }}"
        db_subnet_group_name: my-rds-subnet-group
        state: present
      register: rds_instance

    - name: Create EC2 Instance
      amazon.aws.ec2_instance:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group_ids:
          - "{{ security_group.group_id }}"
        iam_instance_profile: "{{ instance_profile.name }}"
        network_interfaces:
          - associate_public_ip_address: true
        state: running
        tags:
          Name: MyEC2Instance
      register: ec2_instance

    - name: Create CloudWatch Log Group
      community.aws.cloudwatchlogs_log_group:
        log_group_name: /aws/ec2/my-instance
        region: "{{ aws_region }}"
        state: present

    - name: Configure CloudWatch Metric Alarm
      community.aws.cloudwatch_metric_alarm:
        alarm_name: HighCPUUtilization
        comparison_operator: GreaterThanThreshold
        evaluation_periods: 2
        metric_name: CPUUtilization
        namespace: AWS/EC2
        period: 300
        statistic: Average
        threshold: 800
        alarm_description: Alarm when CPU exceeds 80%
        dimensions:
          InstanceId: "{{ ec2_instance.instances[0].instance_id }}"
        region: "{{ aws_region }}"
        state: present


INVENTORY
---
all:
  hosts:
    localhost:
      ansible_connection: local
      ansible_python_interpreter: /usr/bin/python3


ROLES

name: Create AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    aws_region: us-east-1
    vpc_cidr: "10.0.0.0/16"
    subnet_cidr: "10.0.1.0/24"
    instance_type: t2.micro
    ami_id: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI
    key_name: task  # Existing SSH key named 'task' in AWS
    s3_bucket_name: my-unique-bucket-{{ 999999999999 | random }}
    rds_db_name: mydatabase
    rds_instance_identifier: my-rds-instance
    rds_username: admin
    rds_password: SecurePass123!
    role_name: EC2S3RDSRole

  roles:
    - vpc
    - iam
    - s3
    - rds
    - ec2
    - cloudwatch

