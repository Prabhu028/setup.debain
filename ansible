ansible  

To create an Ansible playbook that provisions AWS resources from scratch, including IAM roles with read/write access to S3 and RDS, an EC2 instance with associated VPC, subnet, SSH key, and security group allowing SSH, and attaches the IAM role to the EC2 instance, we’ll organize the solution using Ansible roles for modularity. The playbook will also ensure the SSH key is downloaded locally. Below, I’ll provide the complete setup, including the directory structure, role definitions, and commands to create and run the playbook.


Project Overview
The playbook will:

IAM Role: Create an IAM role with read/write access to S3 and RDS.
VPC and Subnet: Create a VPC, subnet, Internet Gateway, and route table for EC2.
Security Group: Create a security group allowing SSH (port 22).
SSH Key: Create and download an SSH key pair for EC2 access.
EC2 Instance: Launch an EC2 instance in the subnet, attach the IAM role, and use the SSH key and security group.
Directory Structure
The project will be organized as follows:

text

Copy
aws-provisioning/
├── roles/
│   ├── iam_provision/
│   │   ├── defaults/
│   │   │   └── main.yml
│   │   ├── tasks/
│   │   │   └── main.yml
│   │   ├── templates/
│   │   │   ├── s3_policy.json.j2
│   │   │   ├── rds_policy.json.j2
│   │   │   └── ec2_assume_role_policy.json.j2
│   │   └── vars/
│   │       └── main.yml
│   ├── vpc_provision/
│   │   ├── defaults/
│   │   │   └── main.yml
│   │   ├── tasks/
│   │   │   └── main.yml
│   │   └── vars/
│   │       └── main.yml
│   ├── ec2_provision/
│   │   ├── defaults/
│   │   │   └── main.yml
│   │   ├── tasks/
│   │   │   └── main.yml
│   │   └── vars/
│   │       └── main.yml
├── inventory/
│   └── hosts.yml
├── playbook.yml
└── ansible.cfg
Commands to Create the Directory Structure
Run these commands to set up the directory structure and create empty files:

bash

Copy
# Create main project directory
mkdir -p aws-provisioning

# Create role directories and subdirectories
mkdir -p aws-provisioning/roles/{iam_provision,vpc_provision,ec2_provision}/{defaults,tasks,templates,vars}
mkdir -p aws-provisioning/inventory

# Create files
touch aws-provisioning/roles/iam_provision/{defaults/main.yml,tasks/main.yml,vars/main.yml}
touch aws-provisioning/roles/iam_provision/templates/{s3_policy.json.j2,rds_policy.json.j2,ec2_assume_role_policy.json.j2}
touch aws-provisioning/roles/vpc_provision/{defaults/main.yml,tasks/main.yml,vars/main.yml}
touch aws-provisioning/roles/ec2_provision/{defaults/main.yml,tasks/main.yml,vars/main.yml}
touch aws-provisioning/inventory/hosts.yml
touch aws-provisioning/playbook.yml
touch aws-provisioning/ansible.cfg
Ansible Role Definitions
1. IAM Provision Role
This role creates an IAM role for EC2 with read/write access to S3 and RDS.

iam_provision/tasks/main.yml
yaml
Show inline
iam_provision/defaults/main.yml
yaml
Show inline
iam_provision/vars/main.yml
yaml
Show inline
iam_provision/templates/ec弥补2_assume_role_policy.json.j2
json
Show inline
iam_provision/templates/s3_policy.json.j2
json
Show inline
iam_provision/templates/rds_policy.json.j2
json
Show inline
2. VPC Provision Role
This role creates a VPC, subnet, Internet Gateway, route table, and security group for SSH.

vpc_provision/tasks/main.yml
yaml
Show inline
vpc_provision/defaults/main.yml
yaml
Show inline
vpc_provision/vars/main.yml
yaml
Show inline
3. EC2 Provision Role
This role creates an SSH key pair, downloads it, and launches an EC2 instance with the IAM role.

ec2_provision/tasks/main.yml
yaml
Show inline
ec2_provision/defaults/main.yml
yaml
Show inline
ec2_provision/vars/main.yml
yaml
Show inline
4. Inventory
Define localhost for running the playbook.

inventory/hosts.yml
yaml
Show inline
5. Ansible Configuration
Configure Ansible to use the inventory and disable host key checking.

ansible.cfg
ini
Show inline
6. Playbook
The playbook orchestrates the roles in order (IAM, VPC, EC2).

playbook.yml
yaml
Show inline
Commands to Populate Files
Run these commands from the aws-provisioning directory to populate the files:

bash

Copy
# Populate iam_provision/tasks/main.yml
cat << 'EOF' > roles/iam_provision/tasks/main.yml
---
- name: Create IAM role for EC2
  community.aws.iam_role:
    name: "{{ iam_role_name }}"
    assume_role_policy_document: "{{ lookup('template', 'ec2_assume_role_policy.json.j2') }}"
    state: present
    region: "{{ aws_region }}"
  register: iam_role

- name: Attach S3 access policy to IAM role
  community.aws.iam_role_policy:
    role_name: "{{ iam_role_name }}"
    policy_name: "{{ iam_s3_policy_name }}"
    policy_document: "{{ lookup('template', 's3_policy.json.j2') }}"
    state: present
    region: "{{ aws_region }}"

- name: Attach RDS access policy to IAM role
  community.aws.iam_role_policy:
    role_name: "{{ iam_role_name }}"
    policy_name: "{{ iam_rds_policy_name }}"
    policy_document: "{{ lookup('template', 'rds_policy.json.j2') }}"
    state: present
    region: "{{ aws_region }}"
EOF

# Populate iam_provision/defaults/main.yml
cat << 'EOF' > roles/iam_provision/defaults/main.yml
---
iam_role_name: ec2-s3-rds-access-role
iam_s3_policy_name: s3-access-policy
iam_rds_policy_name: rds-access-policy
aws_region: us-east-1
s3_bucket_name: my-ansible-bucket-{{ 999999999999 | random | to_uuid | truncate(8, true, '') }}
rds_instance_identifier: ansible-rds
EOF

# Populate iam_provision/vars/main.yml
cat << 'EOF' > roles/iam_provision/vars/main.yml
---
# Add sensitive variables here if needed
# Use Ansible Vault for sensitive data
EOF

# Populate iam_provision/templates/ec2_assume_role_policy.json.j2
cat << 'EOF' > roles/iam_provision/templates/ec2_assume_role_policy.json.j2
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

# Populate iam_provision/templates/s3_policy.json.j2
cat << 'EOF' > roles/iam_provision/templates/s3_policy.json.j2
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:ListBucket",
        "s3:DeleteObject"
      ],
      "Resource": [
        "arn:aws:s3:::{{ s3_bucket_name }}",
        "arn:aws:s3:::{{ s3_bucket_name }}/*"
      ]
    }
  ]
}
EOF

# Populate iam_provision/templates/rds_policy.json.j2
cat << 'EOF' > roles/iam_provision/templates/rds_policy.json.j2
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "rds:DescribeDBInstances",
        "rds:ModifyDBInstance",
        "rds:CreateDBSnapshot",
        "rds:RestoreDBInstanceFromDBSnapshot"
      ],
      "Resource": [
        "arn:aws:rds:{{ aws_region }}:*:db:{{ rds_instance_identifier }}"
      ]
    }
  ]
}
EOF

# Populate vpc_provision/tasks/main.yml
cat << 'EOF' > roles/vpc_provision/tasks/main.yml
---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: present
  register: vpc

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: present
  register: igw

- name: Create subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ subnet_cidr_block }}"
    region: "{{ aws_region }}"
    state: present
    tags:
      Name: "{{ subnet_name }}"
  register: subnet

- name: Enable public IP on subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ subnet_cidr_block }}"
    region: "{{ aws_region }}"
    map_public: yes
    state: present

- name: Create route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ route_table_name }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.internet_gateway_id }}"
  register: route_table

- name: Associate route table with subnet
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    route_table_id: "{{ route_table.route_table.id }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    state: present

- name: Create security group for SSH
  amazon.aws.ec2_security_group:
    name: "{{ security_group_name }}"
    description: Security group for EC2 SSH access
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0  # Restrict to your IP in production
        rule_desc: Allow SSH
    state: present
  register: security_group
EOF

# Populate vpc_provision/defaults/main.yml
cat << 'EOF' > roles/vpc_provision/defaults/main.yml
---
vpc_name: ansible-vpc
vpc_cidr_block: 10.0.0.0/16
subnet/AIDS: ansible-subnet
subnet_cidr_block: 10.0.1.0/24
route_table_name: ansible-route-table
security_group_name: ec2-ssh-sg
aws_region: us-east-1
EOF

# Populate vpc_provision/vars/main.yml
cat << 'EOF' > roles/vpc_provision/vars/main.yml
---
# Add sensitive variables here if needed
EOF

# Populate ec2_provision/tasks/main.yml
cat << 'EOF' > roles/ec2_provision/tasks/main.yml
---
- name: Create SSH key pair
  amazon.aws.ec2_key:
    name: "{{ ec2_key_name }}"
    region: "{{ aws_region }}"
    state: present
  register: key_pair
  ignore_errors: true  # Continue if key exists

- name: Save SSH key to local file
  ansible.builtin.copy:
    content: "{{ key_pair.key.private_key }}"
    dest: "{{ local_key_path }}"
    mode: '0400'
  when: key_pair.changed and key_pair.key.private_key is defined

- name: Launch EC2 instance
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_key_name }}"
    image_id: "{{ ec2_ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    security_group: "{{ security_group_name }}"
    subnet_id: "{{ subnet_id }}"
    region: "{{ aws_region }}"
    iam_instance_profile: "{{ iam_role_name }}"
    wait: yes
    tags:
      Name: "{{ ec2_instance_name }}"
  register: ec2

- name: Wait for SSH to be available
  ansible.builtin.wait_for:
    host: "{{ ec2.instances[0].public_ip_address }}"
    port: 22
    state: started
    timeout: 300
  when: ec2.instances[0].public_ip_address is defined

- name: Add instance to dynamic inventory
  ansible.builtin.add_host:
    hostname: "{{ ec2.instances[0].public_ip_address }}"
    groups: ec2_instances
    ansible_user: "{{ ec2_ssh_user }}"
    ansible_ssh_private_key_file: "{{ local_key_path }}"
  when: ec2.instances[0].public_ip_address is defined
EOF

# Populate ec2_provision/defaults/main.yml
cat << 'EOF' > roles/ec2_provision/defaults/main.yml
---
ec2_key_name: ansible-key
ec2_ami_id: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (update for your region)
ec2_instance_type: t2.micro
ec2_instance_name: ansible-ec2
ec2_ssh_user: ec2-user
local_key_path: ./ansible-key.pem
aws_region: us-east-1
iam_role_name: ec2-s3-rds-access-role
security_group_name: ec2-ssh-sg
subnet_id: ""  # Will be set dynamically from vpc_provision
EOF

# Populate ec2_provision/vars/main.yml
cat << 'EOF' > roles/ec2_provision/vars/main.yml
---
# Add sensitive variables here if needed
EOF

# Populate inventory/hosts.yml
cat << 'EOF' > inventory/hosts.yml
---
all:
  hosts:
    localhost:
      ansible_connection: local
EOF

# Populate ansible.cfg
cat << 'EOF' > ansible.cfg
[defaults]
inventory = ./inventory/hosts.yml
host_key_checking = False
EOF

# Populate playbook.yml
cat << 'EOF' > playbook.yml
---
- name: Provision AWS resources
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Run IAM provision role
      include_role:
        name: iam_provision

    - name: Run VPC provision role
      include_role:
        name: vpc_provision
      register: vpc_output

    - name: Set subnet_id for EC2 role
      set_fact:
        subnet_id: "{{ vpc_output.subnet.subnet.id }}"
        security_group_id: "{{ vpc_output.security_group.group_id }}"

    - name: Run EC2 provision role
      include_role:
        name: ec2_provision
EOF
Prerequisites
AWS Credentials: Configure via ~/.aws/credentials, IAM roles, or environment variables.
Ansible Dependencies: Install required collections and libraries:
bash

Copy
ansible-galaxy collection install amazon.aws
ansible-galaxy collection install community.aws
pip install boto3
How to Run
Update Variables:
Edit roles/ec2_provision/defaults/main.yml:
ec2_ami_id: Valid AMI ID for your region (e.g., Amazon Linux 2).
aws_region: Your AWS region (e.g., us-east-1).
Edit roles/iam_provision/defaults/main.yml:
s3_bucket_name: Ensure it’s globally unique.
rds_instance_identifier: Adjust if needed.
Edit roles/vpc_provision/defaults/main.yml:
vpc_cidr_block, subnet_cidr_block: Adjust if needed.
Navigate to Project Directory:
bash

Copy
cd aws-provisioning
Run the Playbook:
bash

Copy
ansible-playbook playbook.yml
Verify Resources:
IAM Role: Check in AWS Console (IAM > Roles) for ec2-s3-rds-access-role or CLI:
bash

Copy
aws iam get-role --role-name ec2-s3-rds-access-role
VPC and Subnet: Check in AWS Console (VPC > Your VPCs, Subnets) or CLI:
bash

Copy
aws ec2 describe-vpcs --filters Name=tag:Name,Values=ansible-vpc
Security Group: Verify SSH rule in AWS Console (EC2 > Security Groups) or CLI:
bash

Copy
aws ec2 describe-security-groups --filters Name=group-name,Values=ec2-ssh-sg
SSH Key: Confirm ansible-key.pem is downloaded in the aws-provisioning directory:
bash

Copy
ls -l ansible-key.pem
EC2 Instance: Check in AWS Console (EC2 > Instances) for ansible-ec2 and verify IAM role attachment:
bash

Copy
aws ec2 describe-instances --filters Name=tag:Name,Values=ansible-ec2
Test SSH:
bash

Copy
ssh -i ansible-key.pem ec2-user@<ec2-public-ip>
Key Features
IAM Role: Grants EC2 read/write access to S3 (Get, Put, List, Delete) and RDS (Describe, Modify, Snapshot).
VPC Setup: Creates a VPC, public subnet, Internet Gateway, and route table for Internet access.
Security Group: Allows SSH (port 22) for EC2 access.
SSH Key: Generated and downloaded as ansible-key.pem with proper permissions (0400).
EC2: Launched with the IAM role, in the custom VPC/subnet, with the security group and SSH key.
Modularity: Roles are reusable and independent.
Troubleshooting
SSH Issues: Run ssh -v -i ansible-key.pem ec2-user@<ec2-public-ip> to diagnose. Check security group (port 22) and key pair.
IAM Role: Verify attachment: aws ec2 describe-instances --instance-ids <instance-id>.
VPC/Subnet: Ensure subnet has a route to the Internet Gateway: aws ec2 describe-route-tables.
Errors: Check playbook output or AWS CloudTrail for API errors.
Logs: View EC2 system logs in AWS Console (EC2 > Actions > Monitor and Troubleshoot > Get System Log).
Notes
Security: Restrict the security group’s SSH rule to your IP (e.g., 192.168.1.0/24) in production.
S3/RDS Access: The IAM policies are scoped to a specific bucket and RDS instance. Adjust s3_policy.json.j2 or rds_policy.json.j2 for broader access.
Clean Up: To delete resources, set state: absent in each role’s tasks and rerun the playbook.
If you need to manage prior conversation details, remove referenced chats via the book icon under the message or disable memory in Settings > Data Controls.
Let me know if you need additional features (e.g., S3 bucket creation, RDS provisioning, or specific IAM permissions) or help with errors!







